Proceed and be bold

coding 环节要求直接在白板上写代码，我被问到两个 coding 问题。一是如何检查一棵二叉搜索树是否正确，二是写一个解数独的程序。第一个问题写起来很快，第二个问题因为时间有限，我先写了一个没啥剪枝的暴力搜索的版本，写完后和面试官分析了可以在此之上做的优化。

设计方面的问题有两个。第一个问题是设计一个分布式的数据管理系统。使用场景可以是一个连锁店信息的记录系统，每个分店都有可能更新自己的信息，并把这些改动传播到整个系统中。在设计这一系统的同时要考虑性能、容错、一致性等要求。我一开始想了一个基于 push 的机制，在面试官指点下逐步优化，最后还是有不少问题。于是干脆重新设计了一个基于 poll 的系统，优化改进之后面试官满意了。

另一个设计问题和类的设计有关，要求设计一个包含图形界面的棋盘游戏。因为之前做过不少相关的开发，所以这一部分我还挺擅长的。按照 Single Responsibility 的原则设计了几个分工明确的类，另外把网络对战和 AI 接口都考虑进去了。设计完成后面试官要求我从用户鼠标单击这一事件开始介绍整个控制流程，在某些类中还会问及这么设计的原因，以及和其他设计方案相比的优缺点。

测试部分的问题也有两个。第一个问题是如何测试一个随机函数。第二个问题和分布式系统有关，面试官先向我介绍了一个分布式系统，包括它的使用场景和基本的架构，然后问我其中某一个部件应该如何测试。提到正确性、可伸缩性、一致性和容错性后再给出相应的测试方法应该差不多了。

两轮一共四题，都是对基本数据结构的操作，例如给在一个未排序的数组中去掉重复的数字，还有把一个有序数组转成一个平衡二叉搜索树，在一个已排序但有重复数字的数组中查找元素等。
面试主要都是算法题，比电面难一点。除了算法题外我还被问到一个分布式系统的设计题，以及一个多线程相关的 coding 题，后者用信号量很容易解决。

都是对数组、二叉树和字符串的基本操作。第一题是把一个字符串中的 %20 都转成空格，第二题是按层打印一棵二叉树，第三题是找出两个有序数组里不同的数字（类似求集合的异或）。程序正确后面试官还会问一些优化方面的问题，例如在不同的情形下应该使用哪一种算法。

45 分钟里要做四个题。面试官提前十分钟发了一封邮件给我，上面有两段代码。
第一段代码是一个检查两个字符串是否是 anagram 的程序，写得很绕而且性能很差。面试官先问我这段代码的用途，然后问有什么方法优化，并要求我把代码写在 titanpad 上。
接着他问了我第二段代码是做什么的。第二段代码也写得有点复杂，不过可以看出是一个检查有向图里面是否存在环的程序。
然后是设计题，要求设计一个 LRU Cache，只要说出接口、用到的数据结构和大致的算法就可以了，我想了个用一个 LinkedList 和一个 HashMap 的方案。
第四题还是代码题，写一个合并两个有序链表的程序。

面试官是在 Hulu 做支付的，主要用的语言是 Scala（Hulu 里面各个团队用的技术都很自由，可以选择自己喜欢的语言开发，Python Ruby C# Java 都有）。

我当时正好在字节社做 iOS 上的应用内购验证，就问了他有没有处理黑卡坏账方面的经验。可惜 Hulu 在 iOS 上只有订阅方式的支付途径，没有 non-consumable product 的相关经验。

在一个数组里找出两个数，使得他们和为给定的数。写完这个最基本的版本后还有些别的变化，比如如果所有的数都是一定范围内的正整数，这时可以用一个数组统计每个数字的出现频率。

有一轮的问题从设计一个分布式系统开始，讨论了这个系统的身份验证、数据分片、原子性、容错等问题的设计，考察了很多细节的地方，最后还让我写了 SQL，以及如何优化这些查询指令。不过我对 SQL 很不熟悉，每次用都要查手册，当时用了 ActiveRecord 的查询接口代替。

写一些小型的 web 应用都会用 bootstrap，省时省力；而我之前实习的时候做的一个分布式的内容下载系统，也参考了 murder 的实现。

另外因为当时我在实现字节社 iPhone 和 iPad 的 web 界面时碰到了之前修复的 bug 后来再次出现，忘了测试的情况，就问了他 Twitter 是怎么做移动端 web 界面的测试的。结果面试官说他们也基本上是买一堆设备然后人工测的，倒是桌面端可以用 Selenium。

什么是僵尸进程？如何列出所有的僵尸进程？如何获得这些僵尸进程的 PID？如何把它们终止？我用 ps grep awk xargs 配合管道把这几个问题用一行命令行解决了
第二问是统计一个 httpd 的访问日志中，访问量最大的前五个 IP。我用 Ruby 写了一个，六行代码就能搞定。
了解 DNS 吗，如果浏览器没法上网一般怎么诊断？我的回答是先 dig 看 DNS 解析是否正确，然后用 ping 判断 IP 是否可以访问，再用 curl 看是不是浏览器设置的问题。最后还可以用类似 www.websitedown.info 的服务检查。
怎么把一个文件复制到多个机器上？我说可以先用 ssh-copy-id 把公钥拷过去，然后再用 scp 拷文件。面试官说这样机器多就麻烦了。我解释到可以用 expect 写脚本自动输入密码，还加了句当然也可以用 Twitter 的开源工具 murder 分布式部署。
文件系统中 soft link 和 hard link 的区别。我的解释是 soft link 是一种特殊的文件，它的内容是被指向的文件的路径，而 hard link 是直接指向 inode 的。所以 soft link 可以用于目录，但是 hard link 不可以。
文件系统中 inode 和 path 的区别。我回答是 inode 是文件系统的一个数据结构，指向某个磁盘上的文件；而 path 是由多个 struct dentry 组成的，每个 dentry 描述了 inode 的父子关系。
最后一问是如何修改 DNS 服务器？我说可以修改 /etc/resolve.conf。

貌似都是运维 SA / SRE / DevOps 相关的，第四个应该用 parallel execution 工具，简单的如 pssh / shmux , 复杂一点（强大一些的）可以用 ansible / cdist （parallel execution + ad hoc tasks）来做。关于 symbolic link VS hard link 这个经常会被问到，很难讲清楚，一般讲区别，软链接可以跨文件系统，可以理解为指向指针的指针（WTF，指向文件名的指针，而文件名又是指向 inode 的），硬链接则是指向 inode 的。



算法方面建议好好啃一啃《算法导论》，把习题都做一做。
计算机系统基础可以啃《Computer System, A Programmer's Perspective》，把配套的几个 lab 都做一遍。

Ruby on Rails
C 和 Python 都值得一学。




