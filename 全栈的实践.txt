先聊聊我的技术轨迹吧，从初中开始使用 Linux，以 Ubuntu 作为自己主力系统，而后切换到 ArchLinux，再回到 Ubuntu，一直使用到大一，这几年的 Linux 使用经验奠定了 Server 架构的基础，大一开始尝试自己做一款产品。

　　那时候就琢磨，我应该先写一个网页版，然后再写个客户端。所以从后端开始，我使用 Django 作为起步，不过很快我转移到了 Rails 阵营，Rails 的敏捷开发极大的降低了开发成本，而其的约定习惯，也使得菜鸟能够平安飞过很多危险区域。
　　开始写网页前端的时候，并不知道有前端框架这个东西，直到用 Rails 写完了后才发现原来有东西叫 Ember.js，于是开始用 Ember.js 来重写，一开始的理解还是如何用 Rails 来渲染前端，后来发现其实在引入了前端框架后 Rails 的角色已经变成了个 API Server 了。
　　于是由此开始从新的角度去考虑如何设计 Rails 的 API，阅读了大量的 API 设计的资料，怎么样设计前端才好用，怎么样降低查询时间，服务器缓存，redis，安全等等。
　　Rails 的自动化帮了不少忙，很多自己并不知道的地方它已经帮忙做好，而当你想了解的时候，又会发现其实现是如此精妙。更别说 Rails 对新技术的接受程度，使得你总是有新东西可以玩，CoffeeScript 和 Sass 最早就是 Rails 吸收作为自己框架的默认前端技术。

　　随后由 Ember.js 又切换到 Angular.js，用 Angular 重写一遍，期间又接触了前端工具 Grunt （前端的变化一日千里，现在用的东西已经不是这个了）

　　最后到了 iOS 客户端，此时 iOS 的界面实现又与网页的 HTML 和 CSS 有着很多不同，也因此又花费了不少时间去理解 iOS 的 UI 概念，把思维从网页转换成 iOS 的界面开发思想。

　　数据库也在这个期间从 MySQL 换成了 MongoDB，因为那几年的潮流也正好是这个转变。

　　项目上线后，随着运维的复杂程度逐渐提升，也因此接触了 chef 和 Ansible 这种自动化运维方式，再往后 NewRelic 这类的监控服务也上了，为了一个稳定的开发环境，继而使用了 Vagrant。

　　而这一切都只发生在一年的时间里，不过很有趣的事情是，很多时候我写着 iOS 突然想明白了 HTML 和 CSS 的实现原理，做着 Rails 突然想出了更好的 iOS 架构方式，不同的技术之间触类旁通的感觉在每天都发生着。

　　在后来的时间里，这段经历使得我和不同的技术人沟通都非常轻松，因为去年“秒视”做滤镜的原因，我开始研究起 openGL，在重拾了Blender 之后，很多以前似懂非懂的地方，实现突然变的像 Hello World 一样简单，因此也干脆玩起 Unity 来，在这一切的积累之后，Unity 的学习变的非常轻松，成为了我晚上的休闲项目，或许不久之后，你会看到一款我做的游戏（可能会是 RPG）。

　　我并不觉得全栈会使得你全面平庸，每种技术在做的时候都可以为其他的技术提供思路，而在你了解各种技术的前提下，深入其中的某个技术，时常能够带来对其他技术的反哺。相反，了解的技术如果非常狭隘，很可能才是限制自己潜能的原因。